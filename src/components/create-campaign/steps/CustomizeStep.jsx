import EmailFormatter from '@components/EmailFormatter'
import Icon from '@components/Icon'
import React, { useState } from 'react'
import OpenAI from '@services/openai.service'
import PreviewEmail from '@components/modals/PreviewEmail'

function CustomizeStep({
    setShowPromptsSuggestion,
    showPromptsSuggestion,
    prompts_suggestion,
    csv_variables,
    showCsvVariables,
    setShowCsvVariables,
    goToStep,
    emailSubject,
    setEmailSubject,
    emailBody,
    setEmailBody,
}) {

    const handlePreviewEmail = async () => {
        let response = {
            "answer": [
              {
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "Hello {{first_name}},\n\nI hope this email finds you well. \n\n[[Opening: Share a personal anecdote about a common struggle in outreach]]\n\nIn my own experience of reaching out to potential leads, I found it incredibly challenging to overcome the constant struggle of low response rates and determining the right approach. I understand the importance of finding a solution that streamlines the outreach process and maximizes productivity.\n\n[[Explanation: Highlight Quixly's capabilities]]\n\nThat's where Quixly comes in. Our platform is specifically designed to address these outreach challenges. With its advanced features, Quixly can automate personalized email campaigns, track responses, and provide detailed analytics, ensuring that no prospect slips through the cracks. It's a powerful tool that significantly enhances efficiency and yield.\n\n[[Call to Action: Invite for a discussion]]\n\nI would love to discuss how Quixly can specifically benefit your outreach efforts. Could we schedule a short call sometime this week to explore how Quixly.ai can simplify your workflow and improve your results? \n\nThanks for your time, and I look forward to connecting with you soon.\n\nBest regards,\n\nCostin Gheorghe\nCEO, Quixly.ai"
                },
                "finish_reason": "stop"
              }
            ],
            "error": null,
            "status": 200
          };


        setEmailBody(response.answer[0].message.content)
        openModal()
        let custom_email_prompt = 'I am the CEO of Quixly, a state-of-the-art tool used for generating highly personalized cold emails.';
        let email_gen_prompt = 'here is a template for a cold email i want to generate using ai. Replace all text surrounded by [[]] with text generated by you, as it represents prompts for you. Also remove the [[ ]]. Write the email for me, leaving everything else untouched. Make it short.'
        let final_prompt = custom_email_prompt + email_gen_prompt + emailBody;
        // OpenAI.generateAnswer(final_prompt, (error, cold_email) => {
        //     console.log(error)
        //     console.log(cold_email)
        // })
    }

    const [show, setShow] = useState(false)

    const closeModal = () => {
        setShow(false)
    }

    const openModal = () => {
        setShow(true)
    }

    return (
        <div className='create-campaign-wrapper'>
            <PreviewEmail show={show} closeModal={closeModal} emailSubject={emailSubject} emailBody={emailBody} />
            <div style={{ width: '100%', display: 'flex', alignItems: 'center', flexDirection: 'column' }}>
                <h2 className='mb-2'>Customize email</h2>
                <p style={{ maxWidth: '100%' }} className='mb-4'>Create a custom email for each contact using AI. If that's not what you wish, you can just send the same email to all of them.</p>
                <div className="d-flex w-100" style={{ columnGap: '30px', padding: '0 30px' }}>
                    <div style={{ width: '55%' }}>
                        <div className='d-flex create-email' style={{ flexDirection: 'column' }}>
                            <label htmlFor="email_subject">Subject</label>
                            <input type="text" placeholder='Type a subject or a prompt to generate it automatically' value={emailSubject} onChange={(e) => setEmailSubject(e.target.value)} />
                            <label htmlFor="email_body" className='mt-4'>Email</label>
                            {/* <textarea  name="email_body" id="email_body" cols="30" rows="11" value={emailBody} onChange={(e) => handleEmailTextareaChange(e)}></textarea> */}

                            <EmailFormatter
                                emailBody={emailBody}
                                setEmailBody={setEmailBody}
                            />
                        </div>

                        <div className="d-flex align-items-center space-between actions w-100 mt-3 mb-3">
                            <div className='legend'>
                                <span>{'[[ ]]'} - AI Prompt</span>
                                <span>{'{{ }}'} - Variable</span>
                            </div>

                            <div className="d-flex align-items-center" style={{ columnGap: '20px' }}>
                                <div className='btn-outline'>18 emails</div>
                                <div className='preview-btn d-flex align-items-center' onClick={handlePreviewEmail}>
                                    <Icon icon='eye' />
                                    <p>Preview Email</p>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div style={{ width: '45%', paddingTop: '30px' }}>

                        <div className="alert-container" style={{ marginBottom: '40px' }}>
                            <div>
                                <Icon icon='robot' />
                            </div>
                            <p>We use AI to generate content based on your prompts. </p>
                        </div>

                        {/* ai prompts suggestion */}
                        <div className="prompts-suggestions d-flex align-items-center space-between" onClick={() => setShowPromptsSuggestion(!showPromptsSuggestion)}>
                            <div className="d-flex align-items-center">
                                <Icon icon='stars' />
                                <span className='ml-2'>AI Prompts Suggestions</span>
                            </div>

                            <div className={`show-prompts ${showPromptsSuggestion && 'active'}`}>
                                <Icon icon='chevron-right' />
                            </div>
                        </div>

                        <div className={`prompts-suggestions-wrapper ${showPromptsSuggestion && 'active'}`}>
                            {prompts_suggestion.map(p => <span key={p}>{p}</span>)}
                        </div>

                        {/* CSV variables */}
                        <div className="prompts-suggestions d-flex align-items-center space-between mt-4" onClick={() => setShowCsvVariables(!showCsvVariables)}>
                            <div className="d-flex align-items-center">
                                <Icon icon='stars' />
                                <span className='ml-2'>CSV variables</span>
                            </div>

                            <div className={`show-prompts ${showCsvVariables && 'active'}`}>
                                <Icon icon='chevron-right' />
                            </div>
                        </div>

                        <div className={`prompts-suggestions-wrapper csv-variables ${showCsvVariables && 'active'}`}>
                            {csv_variables.map(p => <span key={p}>{p}</span>)}
                        </div>
                    </div>
                </div>
            </div>

            <div className="d-flex" style={{ columnGap: '15px' }}>
                <div className='btn-outline' onClick={() => goToStep('contacts')}>Back</div>
                <div className='btn-filled' onClick={() => goToStep('overview')}>Next</div>
            </div>
        </div>
    )
}

export default CustomizeStep